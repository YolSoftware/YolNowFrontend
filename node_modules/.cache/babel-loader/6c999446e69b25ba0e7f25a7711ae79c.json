{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\msa4090\\\\Desktop\\\\study programming\\\\workspace_react\\\\react-tut\\\\yol-software\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Form from './components/Form';\nimport YolNowTemplate from './components/YolNowTemplate';\nimport Palette from './components/Palette';\nimport ContentItemList from './components/ContentItemList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst colors = ['#343a40', '#f03e3e', '#12b886', '#228ae6']; // 선택가능한 색\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.id = 0;\n    this.nickname = 'Yol';\n    this.state = {\n      // 초기 값\n      input: '',\n      nickname: 'Yol',\n      contents: [// (시간)아이디 : 내용\n      ],\n      color: '#343a40',\n      time: new Date()\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        input: e.target.value // input 의 다음 바뀔 값\n\n      });\n    };\n\n    this.handleCreate = () => {\n      // 현재 입력값, 시간(YYYY-MM-DD HH:mm:ss) 24시간 방식\n      const {\n        input,\n        contents,\n        color\n      } = this.state;\n      const time = new Date();\n      const nowTime = time.getFullYear() + '-' + (time.getMonth() + 1).toString().padStart(2, '0') + '-' + time.getDay().toString().padStart(2, '0') + ' ' + time.getHours().toString().padStart(2, '0') + ':' + time.getMinutes().toString().padStart(2, '0') + ':' + time.getSeconds().toString().padStart(2, '0');\n      this.setState({\n        input: '',\n        // 입력창 비우기\n        // 배열에 추가\n        // concat 을 사용하는 이유 - 보통 push 를 많이 사용하는데 reate state 에서의 push 는 값이 추가되어도 가르키고 있는 배열은 같기 때문에 비교를 할 수 없음\n        // 최적화를 하게 될 때, 배열을 비교하여 리렌더링을 방지하게 되는데 push 사용 시 최적화를 할 수 없게됨\n        contents: contents.concat({\n          id: this.id++,\n          nickname: this.nickname,\n          text: input,\n          color,\n          time: nowTime\n        })\n      });\n    };\n\n    this.handleKeyPress = e => {\n      // 눌려진 키가 Enter 면 handleCreate 호출\n      if (e.key === 'Enter') {\n        this.handleCreate();\n      }\n    };\n\n    this.handleSelectColor = color => {\n      // 현재 선택된 색으로 변경\n      this.setState({\n        color\n      });\n    };\n  }\n\n  render() {\n    const {\n      input,\n      contents,\n      color,\n      time\n    } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleSelectColor\n    } = this;\n    return /*#__PURE__*/_jsxDEV(YolNowTemplate, {\n      form: /*#__PURE__*/_jsxDEV(Form, {\n        value: input,\n        onKeyPress: handleKeyPress,\n        onChange: handleChange,\n        onCreate: handleCreate,\n        color: color,\n        time: time\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this),\n      palette: /*#__PURE__*/_jsxDEV(Palette, {\n        colors: colors,\n        selected: color,\n        onSelect: handleSelectColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(ContentItemList, {\n        contents: contents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/msa4090/Desktop/study programming/workspace_react/react-tut/yol-software/src/App.js"],"names":["React","Component","Form","YolNowTemplate","Palette","ContentItemList","colors","App","id","nickname","state","input","contents","color","time","Date","handleChange","e","setState","target","value","handleCreate","nowTime","getFullYear","getMonth","toString","padStart","getDay","getHours","getMinutes","getSeconds","concat","text","handleKeyPress","key","handleSelectColor","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;;AAEA,MAAMC,MAAM,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,CAAf,C,CAA6D;;AAE7D,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BO,EAF0B,GAErB,CAFqB;AAAA,SAG1BC,QAH0B,GAGf,KAHe;AAAA,SAK1BC,KAL0B,GAKlB;AAAE;AACRC,MAAAA,KAAK,EAAE,EADD;AAENF,MAAAA,QAAQ,EAAE,KAFJ;AAGNG,MAAAA,QAAQ,EAAE,CACR;AADQ,OAHJ;AAMNC,MAAAA,KAAK,EAAE,SAND;AAONC,MAAAA,IAAI,EAAE,IAAIC,IAAJ;AAPA,KALkB;;AAAA,SAe1BC,YAf0B,GAeVC,CAAD,IAAO;AACpB,WAAKC,QAAL,CAAc;AACZP,QAAAA,KAAK,EAAEM,CAAC,CAACE,MAAF,CAASC,KADJ,CACU;;AADV,OAAd;AAGD,KAnByB;;AAAA,SAqB1BC,YArB0B,GAqBX,MAAM;AACnB;AACA,YAAM;AAAEV,QAAAA,KAAF;AAASC,QAAAA,QAAT;AAAmBC,QAAAA;AAAnB,UAA6B,KAAKH,KAAxC;AACA,YAAMI,IAAI,GAAG,IAAIC,IAAJ,EAAb;AACA,YAAMO,OAAO,GAAGR,IAAI,CAACS,WAAL,KAAqB,GAArB,GAA2B,CAACT,IAAI,CAACU,QAAL,KAAkB,CAAnB,EAAsBC,QAAtB,GAAiCC,QAAjC,CAA0C,CAA1C,EAA6C,GAA7C,CAA3B,GAA+E,GAA/E,GACEZ,IAAI,CAACa,MAAL,GAAcF,QAAd,GAAyBC,QAAzB,CAAkC,CAAlC,EAAqC,GAArC,CADF,GAC8C,GAD9C,GACoDZ,IAAI,CAACc,QAAL,GAAgBH,QAAhB,GAA2BC,QAA3B,CAAoC,CAApC,EAAuC,GAAvC,CADpD,GACkG,GADlG,GAEEZ,IAAI,CAACe,UAAL,GAAkBJ,QAAlB,GAA6BC,QAA7B,CAAsC,CAAtC,EAAyC,GAAzC,CAFF,GAEkD,GAFlD,GAEwDZ,IAAI,CAACgB,UAAL,GAAkBL,QAAlB,GAA6BC,QAA7B,CAAsC,CAAtC,EAAyC,GAAzC,CAFxE;AAIA,WAAKR,QAAL,CAAc;AACZP,QAAAA,KAAK,EAAE,EADK;AACD;AACX;AACA;AACA;AACAC,QAAAA,QAAQ,EAAEA,QAAQ,CAACmB,MAAT,CAAgB;AACxBvB,UAAAA,EAAE,EAAE,KAAKA,EAAL,EADoB;AAExBC,UAAAA,QAAQ,EAAE,KAAKA,QAFS;AAGxBuB,UAAAA,IAAI,EAAErB,KAHkB;AAIxBE,UAAAA,KAJwB;AAKxBC,UAAAA,IAAI,EAAEQ;AALkB,SAAhB;AALE,OAAd;AAaD,KA1CyB;;AAAA,SA4C1BW,cA5C0B,GA4CRhB,CAAD,IAAO;AACtB;AACA,UAAGA,CAAC,CAACiB,GAAF,KAAU,OAAb,EAAsB;AACpB,aAAKb,YAAL;AACD;AACF,KAjDyB;;AAAA,SAmD1Bc,iBAnD0B,GAmDLtB,KAAD,IAAW;AAC7B;AACA,WAAKK,QAAL,CAAc;AACZL,QAAAA;AADY,OAAd;AAGD,KAxDyB;AAAA;;AA0D1BuB,EAAAA,MAAM,GAAG;AAEP,UAAM;AAAEzB,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA,KAAnB;AAA0BC,MAAAA;AAA1B,QAAmC,KAAKJ,KAA9C;AACA,UAAM;AACJM,MAAAA,YADI;AAEJK,MAAAA,YAFI;AAGJY,MAAAA,cAHI;AAIJE,MAAAA;AAJI,QAKF,IALJ;AAOA,wBACE,QAAC,cAAD;AAAgB,MAAA,IAAI,eAClB,QAAC,IAAD;AACE,QAAA,KAAK,EAAExB,KADT;AAEE,QAAA,UAAU,EAAEsB,cAFd;AAGE,QAAA,QAAQ,EAAEjB,YAHZ;AAIE,QAAA,QAAQ,EAAEK,YAJZ;AAKE,QAAA,KAAK,EAAER,KALT;AAME,QAAA,IAAI,EAAEC;AANR;AAAA;AAAA;AAAA;AAAA,cADF;AAUE,MAAA,OAAO,eACL,QAAC,OAAD;AAAS,QAAA,MAAM,EAAER,MAAjB;AAAyB,QAAA,QAAQ,EAAEO,KAAnC;AAA0C,QAAA,QAAQ,EAAEsB;AAApD;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA,6BAcE,QAAC,eAAD;AAAiB,QAAA,QAAQ,EAAEvB;AAA3B;AAAA;AAAA;AAAA;AAAA;AAdF;AAAA;AAAA;AAAA;AAAA,YADF;AAkBD;;AAtFyB;;AAyF5B,eAAeL,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport Form from './components/Form';\nimport YolNowTemplate from './components/YolNowTemplate';\nimport Palette from './components/Palette';\nimport ContentItemList from './components/ContentItemList';\n\nconst colors = ['#343a40', '#f03e3e', '#12b886', '#228ae6']; // 선택가능한 색\n\nclass App extends Component {\n  \n  id = 0; // 배열 렌더링을 위한 키 값 - 컴포넌트가 리렌더링 될 때 효율적으로 작동시키기 위해 사용\n  nickname = 'Yol';\n\n  state = { // 초기 값\n    input: '',\n    nickname: 'Yol',\n    contents: [      \n      // (시간)아이디 : 내용\n    ],\n    color: '#343a40',\n    time: new Date()\n  }   \n\n  handleChange = (e) => {\n    this.setState({\n      input: e.target.value // input 의 다음 바뀔 값\n    });\n  }\n\n  handleCreate = () => {\n    // 현재 입력값, 시간(YYYY-MM-DD HH:mm:ss) 24시간 방식\n    const { input, contents, color } = this.state;\n    const time = new Date()\n    const nowTime = time.getFullYear() + '-' + (time.getMonth() + 1).toString().padStart(2, '0') + '-' \n                    + time.getDay().toString().padStart(2, '0') + ' ' + time.getHours().toString().padStart(2, '0') + ':' \n                    + time.getMinutes().toString().padStart(2, '0') + ':' + time.getSeconds().toString().padStart(2, '0');    \n\n    this.setState({\n      input: '', // 입력창 비우기\n      // 배열에 추가\n      // concat 을 사용하는 이유 - 보통 push 를 많이 사용하는데 reate state 에서의 push 는 값이 추가되어도 가르키고 있는 배열은 같기 때문에 비교를 할 수 없음\n      // 최적화를 하게 될 때, 배열을 비교하여 리렌더링을 방지하게 되는데 push 사용 시 최적화를 할 수 없게됨\n      contents: contents.concat({\n        id: this.id++,\n        nickname: this.nickname,        \n        text: input,\n        color,\n        time: nowTime\n      })      \n    });    \n  }\n\n  handleKeyPress = (e) => {\n    // 눌려진 키가 Enter 면 handleCreate 호출\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n\n  handleSelectColor = (color) => {\n    // 현재 선택된 색으로 변경\n    this.setState({\n      color\n    })\n  }\n\n  render() {\n\n    const { input, contents, color, time } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleSelectColor,\n    } = this;        \n\n    return (      \n      <YolNowTemplate form={(\n        <Form \n          value={input}\n          onKeyPress={handleKeyPress}\n          onChange={handleChange}\n          onCreate={handleCreate}\n          color={color}   \n          time={time}    \n        />\n      )}\n        palette={(\n          <Palette colors={colors} selected={color} onSelect={handleSelectColor}/>\n        )}\n      >\n        <ContentItemList contents={contents}/>     \n      </YolNowTemplate>            \n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}