{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\msa4090\\\\Desktop\\\\study programming\\\\workspace_react\\\\react-tut\\\\yol-software\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Form from './components/Form';\nimport YolNowTemplate from './components/YolNowTemplate';\nimport Palette from './components/Palette';\nimport ContentItemList from './components/ContentItemList';\nimport MakeKey from './components/MakeKey';\nimport MakeKeyItem from './components/MakeKeyItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst colors = ['#343a40', '#f03e3e', '#12b886', '#228ae6']; // 선택가능한 색\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.id = 0;\n    this.nickname = 'Yol';\n    this.state = {\n      // 초기 값\n      input: '',\n      nickname: '',\n      contents: [// (시간)아이디 : 내용\n      ],\n      color: '#343a40',\n      time: ''\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        input: e.target.value // input 의 다음 바뀔 값\n\n      });\n    };\n\n    this.handleCreate = () => {\n      // 현재 입력값, 시간(YYYY-MM-DD HH:mm:ss) 24시간 방식\n      const {\n        input,\n        contents,\n        color\n      } = this.state;\n      const time = new Date();\n      /*\n      const nowTime = time.getFullYear() + '-' + (time.getMonth() + 1).toString().padStart(2, '0') + '-' \n                      + time.getDate().toString().padStart(2, '0') + ' ' + time.getHours().toString().padStart(2, '0') + ':' \n                      + time.getMinutes().toString().padStart(2, '0') + ':' + time.getSeconds().toString().padStart(2, '0');    \n      */\n\n      const nowTime = time.getHours().toString().padStart(2, '0') + ':' + time.getMinutes().toString().padStart(2, '0') + ':' + time.getSeconds().toString().padStart(2, '0');\n      this.setState({\n        input: '',\n        // 입력창 비우기\n        // 배열에 추가\n        // concat 을 사용하는 이유 - 보통 push 를 많이 사용하는데 reate state 에서의 push 는 값이 추가되어도 가르키고 있는 배열은 같기 때문에 비교를 할 수 없음\n        // 최적화를 하게 될 때, 배열을 비교하여 리렌더링을 방지하게 되는데 push 사용 시 최적화를 할 수 없게됨\n        contents: contents.concat({\n          id: this.id++,\n          nickname: this.nickname,\n          text: input,\n          color,\n          time: nowTime\n        })\n      });\n    };\n\n    this.handleKeyPress = e => {\n      // 눌려진 키가 Enter 면 handleCreate 호출\n      if (e.key === 'Enter') {\n        this.handleCreate();\n      }\n    };\n\n    this.handleSelectColor = color => {\n      // 현재 선택된 색으로 변경\n      this.setState({\n        color\n      });\n    };\n  }\n\n  render() {\n    const {\n      input,\n      contents,\n      color,\n      time\n    } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleSelectColor\n    } = this;\n    return /*#__PURE__*/_jsxDEV(YolNowTemplate, {\n      form: /*#__PURE__*/_jsxDEV(Form, {\n        value: input,\n        onKeyPress: handleKeyPress,\n        onChange: handleChange,\n        onCreate: handleCreate,\n        color: color,\n        time: time\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this),\n      palette: /*#__PURE__*/_jsxDEV(Palette, {\n        colors: colors,\n        selected: color,\n        onSelect: handleSelectColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this),\n      children: [/*#__PURE__*/_jsxDEV(ContentItemList, {\n        contents: contents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MakeKey, {\n        children: /*#__PURE__*/_jsxDEV(MakeKeyItem, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/msa4090/Desktop/study programming/workspace_react/react-tut/yol-software/src/App.js"],"names":["React","Component","Form","YolNowTemplate","Palette","ContentItemList","MakeKey","MakeKeyItem","colors","App","id","nickname","state","input","contents","color","time","handleChange","e","setState","target","value","handleCreate","Date","nowTime","getHours","toString","padStart","getMinutes","getSeconds","concat","text","handleKeyPress","key","handleSelectColor","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Form from './components/Form';\nimport YolNowTemplate from './components/YolNowTemplate';\nimport Palette from './components/Palette';\nimport ContentItemList from './components/ContentItemList';\nimport MakeKey from './components/MakeKey';\nimport MakeKeyItem from './components/MakeKeyItem';\n\nconst colors = ['#343a40', '#f03e3e', '#12b886', '#228ae6']; // 선택가능한 색\n\nclass App extends Component {\n  \n  id = 0; // 배열 렌더링을 위한 키 값 - 컴포넌트가 리렌더링 될 때 효율적으로 작동시키기 위해 사용\n  nickname = 'Yol';\n\n  state = { // 초기 값\n    input: '',\n    nickname: '',\n    contents: [      \n      // (시간)아이디 : 내용\n    ],\n    color: '#343a40',\n    time: ''\n  }   \n\n  handleChange = (e) => {\n    this.setState({\n      input: e.target.value // input 의 다음 바뀔 값\n    });\n  }\n\n  handleCreate = () => {\n    // 현재 입력값, 시간(YYYY-MM-DD HH:mm:ss) 24시간 방식\n    const { input, contents, color } = this.state;\n    const time = new Date()\n    /*\n    const nowTime = time.getFullYear() + '-' + (time.getMonth() + 1).toString().padStart(2, '0') + '-' \n                    + time.getDate().toString().padStart(2, '0') + ' ' + time.getHours().toString().padStart(2, '0') + ':' \n                    + time.getMinutes().toString().padStart(2, '0') + ':' + time.getSeconds().toString().padStart(2, '0');    \n    */\n    \n    const nowTime = time.getHours().toString().padStart(2, '0') + ':' \n                    + time.getMinutes().toString().padStart(2, '0') + ':' + time.getSeconds().toString().padStart(2, '0');\n\n    this.setState({\n      input: '', // 입력창 비우기\n      // 배열에 추가\n      // concat 을 사용하는 이유 - 보통 push 를 많이 사용하는데 reate state 에서의 push 는 값이 추가되어도 가르키고 있는 배열은 같기 때문에 비교를 할 수 없음\n      // 최적화를 하게 될 때, 배열을 비교하여 리렌더링을 방지하게 되는데 push 사용 시 최적화를 할 수 없게됨\n      contents: contents.concat({\n        id: this.id++,\n        nickname: this.nickname,        \n        text: input,\n        color,\n        time: nowTime\n      })      \n    });    \n  }\n\n  handleKeyPress = (e) => {\n    // 눌려진 키가 Enter 면 handleCreate 호출\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n\n  handleSelectColor = (color) => {\n    // 현재 선택된 색으로 변경\n    this.setState({\n      color\n    })\n  }\n\n  render() {\n\n    const { input, contents, color, time } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleSelectColor,\n    } = this;        \n\n    return (      \n      <YolNowTemplate form={(\n        <Form \n          value={input}\n          onKeyPress={handleKeyPress}\n          onChange={handleChange}\n          onCreate={handleCreate}\n          color={color}   \n          time={time}    \n        />\n      )}\n        palette={(\n          <Palette colors={colors} selected={color} onSelect={handleSelectColor}/>\n        )}\n      >\n        <ContentItemList contents={contents}/>     \n        <MakeKey>\n          <MakeKeyItem />\n        </MakeKey>\n      </YolNowTemplate>                        \n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}